#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config = require("../config/config")()
const app = require("../src/server/app")
const log = require("../src/server/logger")
const http = require("http")
const socketIoClient = require("../src/server/socketIoClient")

/**
 * Get port from environment and store in Express.
 */

const port = config.get("bin.port")
app.set("port", port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)
socketIoClient(server)

/**
 * Listen on provided port, on all network interfaces.
 */
const host = config.get("bin.host")
log.info({ host, port }, `Listening on ${host}:${port}`)
server.listen(port, host)
server.on("error", onError)
server.on("listening", onListening)

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      log.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      log.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  log.info("Server has started and is now listening for requests")
}
